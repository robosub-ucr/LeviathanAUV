# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uuv_control_msgs/InitRectTrajectoryRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import std_msgs.msg

class InitRectTrajectoryRequest(genpy.Message):
  _md5sum = "82860775b3df6259cef2af6522eca70e"
  _type = "uuv_control_msgs/InitRectTrajectoryRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Copyright (c) 2016 The UUV Simulator Authors.
# All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

std_msgs/Time start_time
bool start_now
geometry_msgs/Point origin
float64 height
float64 width
float64 angle_offset
float64 heading_offset
float64 max_forward_speed

================================================================================
MSG: std_msgs/Time
time data

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['start_time','start_now','origin','height','width','angle_offset','heading_offset','max_forward_speed']
  _slot_types = ['std_msgs/Time','bool','geometry_msgs/Point','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_time,start_now,origin,height,width,angle_offset,heading_offset,max_forward_speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InitRectTrajectoryRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.start_time is None:
        self.start_time = std_msgs.msg.Time()
      if self.start_now is None:
        self.start_now = False
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point()
      if self.height is None:
        self.height = 0.
      if self.width is None:
        self.width = 0.
      if self.angle_offset is None:
        self.angle_offset = 0.
      if self.heading_offset is None:
        self.heading_offset = 0.
      if self.max_forward_speed is None:
        self.max_forward_speed = 0.
    else:
      self.start_time = std_msgs.msg.Time()
      self.start_now = False
      self.origin = geometry_msgs.msg.Point()
      self.height = 0.
      self.width = 0.
      self.angle_offset = 0.
      self.heading_offset = 0.
      self.max_forward_speed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2IB8d().pack(_x.start_time.data.secs, _x.start_time.data.nsecs, _x.start_now, _x.origin.x, _x.origin.y, _x.origin.z, _x.height, _x.width, _x.angle_offset, _x.heading_offset, _x.max_forward_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.start_time is None:
        self.start_time = std_msgs.msg.Time()
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 73
      (_x.start_time.data.secs, _x.start_time.data.nsecs, _x.start_now, _x.origin.x, _x.origin.y, _x.origin.z, _x.height, _x.width, _x.angle_offset, _x.heading_offset, _x.max_forward_speed,) = _get_struct_2IB8d().unpack(str[start:end])
      self.start_now = bool(self.start_now)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2IB8d().pack(_x.start_time.data.secs, _x.start_time.data.nsecs, _x.start_now, _x.origin.x, _x.origin.y, _x.origin.z, _x.height, _x.width, _x.angle_offset, _x.heading_offset, _x.max_forward_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.start_time is None:
        self.start_time = std_msgs.msg.Time()
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 73
      (_x.start_time.data.secs, _x.start_time.data.nsecs, _x.start_now, _x.origin.x, _x.origin.y, _x.origin.z, _x.height, _x.width, _x.angle_offset, _x.heading_offset, _x.max_forward_speed,) = _get_struct_2IB8d().unpack(str[start:end])
      self.start_now = bool(self.start_now)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IB8d = None
def _get_struct_2IB8d():
    global _struct_2IB8d
    if _struct_2IB8d is None:
        _struct_2IB8d = struct.Struct("<2IB8d")
    return _struct_2IB8d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uuv_control_msgs/InitRectTrajectoryResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class InitRectTrajectoryResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "uuv_control_msgs/InitRectTrajectoryResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success

"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InitRectTrajectoryResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class InitRectTrajectory(object):
  _type          = 'uuv_control_msgs/InitRectTrajectory'
  _md5sum = 'bb6b6b97f153ba237ef24a0678facef1'
  _request_class  = InitRectTrajectoryRequest
  _response_class = InitRectTrajectoryResponse
