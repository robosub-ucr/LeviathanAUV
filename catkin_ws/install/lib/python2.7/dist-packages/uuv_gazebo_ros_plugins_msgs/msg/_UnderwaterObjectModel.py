# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uuv_gazebo_ros_plugins_msgs/UnderwaterObjectModel.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class UnderwaterObjectModel(genpy.Message):
  _md5sum = "35ada57addb7202af96020ea2ddc109c"
  _type = "uuv_gazebo_ros_plugins_msgs/UnderwaterObjectModel"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Copyright (c) 2016 The UUV Simulator Authors.
# All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

float64[] added_mass
float64[] linear_damping
float64[] linear_damping_forward_speed
float64[] quadratic_damping
float64 volume
float64 bbox_height
float64 bbox_length
float64 bbox_width
float64 fluid_density
geometry_msgs/Vector3 cob
bool neutrally_buoyant
geometry_msgs/Inertia inertia
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Inertia
# Mass [kg]
float64 m

# Center of mass [m]
geometry_msgs/Vector3 com

# Inertia Tensor [kg-m^2]
#     | ixx ixy ixz |
# I = | ixy iyy iyz |
#     | ixz iyz izz |
float64 ixx
float64 ixy
float64 ixz
float64 iyy
float64 iyz
float64 izz
"""
  __slots__ = ['added_mass','linear_damping','linear_damping_forward_speed','quadratic_damping','volume','bbox_height','bbox_length','bbox_width','fluid_density','cob','neutrally_buoyant','inertia']
  _slot_types = ['float64[]','float64[]','float64[]','float64[]','float64','float64','float64','float64','float64','geometry_msgs/Vector3','bool','geometry_msgs/Inertia']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       added_mass,linear_damping,linear_damping_forward_speed,quadratic_damping,volume,bbox_height,bbox_length,bbox_width,fluid_density,cob,neutrally_buoyant,inertia

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UnderwaterObjectModel, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.added_mass is None:
        self.added_mass = []
      if self.linear_damping is None:
        self.linear_damping = []
      if self.linear_damping_forward_speed is None:
        self.linear_damping_forward_speed = []
      if self.quadratic_damping is None:
        self.quadratic_damping = []
      if self.volume is None:
        self.volume = 0.
      if self.bbox_height is None:
        self.bbox_height = 0.
      if self.bbox_length is None:
        self.bbox_length = 0.
      if self.bbox_width is None:
        self.bbox_width = 0.
      if self.fluid_density is None:
        self.fluid_density = 0.
      if self.cob is None:
        self.cob = geometry_msgs.msg.Vector3()
      if self.neutrally_buoyant is None:
        self.neutrally_buoyant = False
      if self.inertia is None:
        self.inertia = geometry_msgs.msg.Inertia()
    else:
      self.added_mass = []
      self.linear_damping = []
      self.linear_damping_forward_speed = []
      self.quadratic_damping = []
      self.volume = 0.
      self.bbox_height = 0.
      self.bbox_length = 0.
      self.bbox_width = 0.
      self.fluid_density = 0.
      self.cob = geometry_msgs.msg.Vector3()
      self.neutrally_buoyant = False
      self.inertia = geometry_msgs.msg.Inertia()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.added_mass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.added_mass))
      length = len(self.linear_damping)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.linear_damping))
      length = len(self.linear_damping_forward_speed)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.linear_damping_forward_speed))
      length = len(self.quadratic_damping)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.quadratic_damping))
      _x = self
      buff.write(_get_struct_8dB10d().pack(_x.volume, _x.bbox_height, _x.bbox_length, _x.bbox_width, _x.fluid_density, _x.cob.x, _x.cob.y, _x.cob.z, _x.neutrally_buoyant, _x.inertia.m, _x.inertia.com.x, _x.inertia.com.y, _x.inertia.com.z, _x.inertia.ixx, _x.inertia.ixy, _x.inertia.ixz, _x.inertia.iyy, _x.inertia.iyz, _x.inertia.izz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cob is None:
        self.cob = geometry_msgs.msg.Vector3()
      if self.inertia is None:
        self.inertia = geometry_msgs.msg.Inertia()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.added_mass = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.linear_damping = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.linear_damping_forward_speed = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.quadratic_damping = s.unpack(str[start:end])
      _x = self
      start = end
      end += 145
      (_x.volume, _x.bbox_height, _x.bbox_length, _x.bbox_width, _x.fluid_density, _x.cob.x, _x.cob.y, _x.cob.z, _x.neutrally_buoyant, _x.inertia.m, _x.inertia.com.x, _x.inertia.com.y, _x.inertia.com.z, _x.inertia.ixx, _x.inertia.ixy, _x.inertia.ixz, _x.inertia.iyy, _x.inertia.iyz, _x.inertia.izz,) = _get_struct_8dB10d().unpack(str[start:end])
      self.neutrally_buoyant = bool(self.neutrally_buoyant)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.added_mass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.added_mass.tostring())
      length = len(self.linear_damping)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.linear_damping.tostring())
      length = len(self.linear_damping_forward_speed)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.linear_damping_forward_speed.tostring())
      length = len(self.quadratic_damping)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.quadratic_damping.tostring())
      _x = self
      buff.write(_get_struct_8dB10d().pack(_x.volume, _x.bbox_height, _x.bbox_length, _x.bbox_width, _x.fluid_density, _x.cob.x, _x.cob.y, _x.cob.z, _x.neutrally_buoyant, _x.inertia.m, _x.inertia.com.x, _x.inertia.com.y, _x.inertia.com.z, _x.inertia.ixx, _x.inertia.ixy, _x.inertia.ixz, _x.inertia.iyy, _x.inertia.iyz, _x.inertia.izz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cob is None:
        self.cob = geometry_msgs.msg.Vector3()
      if self.inertia is None:
        self.inertia = geometry_msgs.msg.Inertia()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.added_mass = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.linear_damping = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.linear_damping_forward_speed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.quadratic_damping = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 145
      (_x.volume, _x.bbox_height, _x.bbox_length, _x.bbox_width, _x.fluid_density, _x.cob.x, _x.cob.y, _x.cob.z, _x.neutrally_buoyant, _x.inertia.m, _x.inertia.com.x, _x.inertia.com.y, _x.inertia.com.z, _x.inertia.ixx, _x.inertia.ixy, _x.inertia.ixz, _x.inertia.iyy, _x.inertia.iyz, _x.inertia.izz,) = _get_struct_8dB10d().unpack(str[start:end])
      self.neutrally_buoyant = bool(self.neutrally_buoyant)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8dB10d = None
def _get_struct_8dB10d():
    global _struct_8dB10d
    if _struct_8dB10d is None:
        _struct_8dB10d = struct.Struct("<8dB10d")
    return _struct_8dB10d
