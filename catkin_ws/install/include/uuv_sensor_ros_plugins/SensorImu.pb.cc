// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorImu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SensorImu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sensor_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Imu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Imu_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SensorImu_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_SensorImu_2eproto() {
  protobuf_AddDesc_SensorImu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SensorImu.proto");
  GOOGLE_CHECK(file != NULL);
  Imu_descriptor_ = file->message_type(0);
  static const int Imu_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, orientation_covariance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, angular_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, angular_velocity_covariance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, linear_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, linear_acceleration_covariance_),
  };
  Imu_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Imu_descriptor_,
      Imu::default_instance_,
      Imu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, _has_bits_[0]),
      -1,
      -1,
      sizeof(Imu),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SensorImu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Imu_descriptor_, &Imu::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SensorImu_2eproto() {
  delete Imu::default_instance_;
  delete Imu_reflection_;
}

void protobuf_AddDesc_SensorImu_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_SensorImu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_quaternion_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SensorImu.proto\022\020sensor_msgs.msgs\032\020qua"
    "ternion.proto\032\016vector3d.proto\"\221\002\n\003Imu\022,\n"
    "\013orientation\030\001 \002(\0132\027.gazebo.msgs.Quatern"
    "ion\022\"\n\026orientation_covariance\030\002 \003(\002B\002\020\001\022"
    "/\n\020angular_velocity\030\003 \002(\0132\025.gazebo.msgs."
    "Vector3d\022\'\n\033angular_velocity_covariance\030"
    "\004 \003(\002B\002\020\001\0222\n\023linear_acceleration\030\005 \002(\0132\025"
    ".gazebo.msgs.Vector3d\022*\n\036linear_accelera"
    "tion_covariance\030\006 \003(\002B\002\020\001", 345);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SensorImu.proto", &protobuf_RegisterTypes);
  Imu::default_instance_ = new Imu();
  Imu::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SensorImu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SensorImu_2eproto {
  StaticDescriptorInitializer_SensorImu_2eproto() {
    protobuf_AddDesc_SensorImu_2eproto();
  }
} static_descriptor_initializer_SensorImu_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imu::kOrientationFieldNumber;
const int Imu::kOrientationCovarianceFieldNumber;
const int Imu::kAngularVelocityFieldNumber;
const int Imu::kAngularVelocityCovarianceFieldNumber;
const int Imu::kLinearAccelerationFieldNumber;
const int Imu::kLinearAccelerationCovarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imu::Imu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.msgs.Imu)
}

void Imu::InitAsDefaultInstance() {
  orientation_ = const_cast< ::gazebo::msgs::Quaternion*>(&::gazebo::msgs::Quaternion::default_instance());
  angular_velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  linear_acceleration_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

Imu::Imu(const Imu& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.Imu)
}

void Imu::SharedCtor() {
  _cached_size_ = 0;
  orientation_ = NULL;
  angular_velocity_ = NULL;
  linear_acceleration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Imu::~Imu() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.Imu)
  SharedDtor();
}

void Imu::SharedDtor() {
  if (this != default_instance_) {
    delete orientation_;
    delete angular_velocity_;
    delete linear_acceleration_;
  }
}

void Imu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Imu_descriptor_;
}

const Imu& Imu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorImu_2eproto();
  return *default_instance_;
}

Imu* Imu::default_instance_ = NULL;

Imu* Imu::New(::google::protobuf::Arena* arena) const {
  Imu* n = new Imu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.msgs.Imu)
  if (_has_bits_[0 / 32] & 21u) {
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::gazebo::msgs::Quaternion::Clear();
    }
    if (has_angular_velocity()) {
      if (angular_velocity_ != NULL) angular_velocity_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_linear_acceleration()) {
      if (linear_acceleration_ != NULL) linear_acceleration_->::gazebo::msgs::Vector3d::Clear();
    }
  }
  orientation_covariance_.Clear();
  angular_velocity_covariance_.Clear();
  linear_acceleration_covariance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Imu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_msgs.msgs.Imu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Quaternion orientation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orientation_covariance;
        break;
      }

      // repeated float orientation_covariance = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_orientation_covariance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_orientation_covariance())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_orientation_covariance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_angular_velocity;
        break;
      }

      // required .gazebo.msgs.Vector3d angular_velocity = 3;
      case 3: {
        if (tag == 26) {
         parse_angular_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_angular_velocity_covariance;
        break;
      }

      // repeated float angular_velocity_covariance = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_angular_velocity_covariance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_angular_velocity_covariance())));
        } else if (tag == 37) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_angular_velocity_covariance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_linear_acceleration;
        break;
      }

      // required .gazebo.msgs.Vector3d linear_acceleration = 5;
      case 5: {
        if (tag == 42) {
         parse_linear_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_linear_acceleration_covariance;
        break;
      }

      // repeated float linear_acceleration_covariance = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_linear_acceleration_covariance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_linear_acceleration_covariance())));
        } else if (tag == 53) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_linear_acceleration_covariance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_msgs.msgs.Imu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_msgs.msgs.Imu)
  return false;
#undef DO_
}

void Imu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_msgs.msgs.Imu)
  // required .gazebo.msgs.Quaternion orientation = 1;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->orientation_, output);
  }

  // repeated float orientation_covariance = 2 [packed = true];
  if (this->orientation_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_orientation_covariance_cached_byte_size_);
  }
  for (int i = 0; i < this->orientation_covariance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->orientation_covariance(i), output);
  }

  // required .gazebo.msgs.Vector3d angular_velocity = 3;
  if (has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->angular_velocity_, output);
  }

  // repeated float angular_velocity_covariance = 4 [packed = true];
  if (this->angular_velocity_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_angular_velocity_covariance_cached_byte_size_);
  }
  for (int i = 0; i < this->angular_velocity_covariance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->angular_velocity_covariance(i), output);
  }

  // required .gazebo.msgs.Vector3d linear_acceleration = 5;
  if (has_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->linear_acceleration_, output);
  }

  // repeated float linear_acceleration_covariance = 6 [packed = true];
  if (this->linear_acceleration_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_linear_acceleration_covariance_cached_byte_size_);
  }
  for (int i = 0; i < this->linear_acceleration_covariance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->linear_acceleration_covariance(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_msgs.msgs.Imu)
}

::google::protobuf::uint8* Imu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.Imu)
  // required .gazebo.msgs.Quaternion orientation = 1;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->orientation_, false, target);
  }

  // repeated float orientation_covariance = 2 [packed = true];
  if (this->orientation_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _orientation_covariance_cached_byte_size_, target);
  }
  for (int i = 0; i < this->orientation_covariance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->orientation_covariance(i), target);
  }

  // required .gazebo.msgs.Vector3d angular_velocity = 3;
  if (has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->angular_velocity_, false, target);
  }

  // repeated float angular_velocity_covariance = 4 [packed = true];
  if (this->angular_velocity_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _angular_velocity_covariance_cached_byte_size_, target);
  }
  for (int i = 0; i < this->angular_velocity_covariance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->angular_velocity_covariance(i), target);
  }

  // required .gazebo.msgs.Vector3d linear_acceleration = 5;
  if (has_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->linear_acceleration_, false, target);
  }

  // repeated float linear_acceleration_covariance = 6 [packed = true];
  if (this->linear_acceleration_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _linear_acceleration_covariance_cached_byte_size_, target);
  }
  for (int i = 0; i < this->linear_acceleration_covariance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->linear_acceleration_covariance(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.Imu)
  return target;
}

int Imu::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sensor_msgs.msgs.Imu)
  int total_size = 0;

  if (has_orientation()) {
    // required .gazebo.msgs.Quaternion orientation = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  if (has_angular_velocity()) {
    // required .gazebo.msgs.Vector3d angular_velocity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);
  }

  if (has_linear_acceleration()) {
    // required .gazebo.msgs.Vector3d linear_acceleration = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_);
  }

  return total_size;
}
int Imu::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.msgs.Imu)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000015) ^ 0x00000015) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Quaternion orientation = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);

    // required .gazebo.msgs.Vector3d angular_velocity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);

    // required .gazebo.msgs.Vector3d linear_acceleration = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float orientation_covariance = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->orientation_covariance_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _orientation_covariance_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float angular_velocity_covariance = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->angular_velocity_covariance_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _angular_velocity_covariance_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float linear_acceleration_covariance = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->linear_acceleration_covariance_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _linear_acceleration_covariance_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.msgs.Imu)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Imu* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Imu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.msgs.Imu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.msgs.Imu)
    MergeFrom(*source);
  }
}

void Imu::MergeFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.msgs.Imu)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  orientation_covariance_.MergeFrom(from.orientation_covariance_);
  angular_velocity_covariance_.MergeFrom(from.angular_velocity_covariance_);
  linear_acceleration_covariance_.MergeFrom(from.linear_acceleration_covariance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orientation()) {
      mutable_orientation()->::gazebo::msgs::Quaternion::MergeFrom(from.orientation());
    }
    if (from.has_angular_velocity()) {
      mutable_angular_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from.angular_velocity());
    }
    if (from.has_linear_acceleration()) {
      mutable_linear_acceleration()->::gazebo::msgs::Vector3d::MergeFrom(from.linear_acceleration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Imu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.msgs.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.msgs.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imu::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000015) != 0x00000015) return false;

  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  if (has_angular_velocity()) {
    if (!this->angular_velocity_->IsInitialized()) return false;
  }
  if (has_linear_acceleration()) {
    if (!this->linear_acceleration_->IsInitialized()) return false;
  }
  return true;
}

void Imu::Swap(Imu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imu::InternalSwap(Imu* other) {
  std::swap(orientation_, other->orientation_);
  orientation_covariance_.UnsafeArenaSwap(&other->orientation_covariance_);
  std::swap(angular_velocity_, other->angular_velocity_);
  angular_velocity_covariance_.UnsafeArenaSwap(&other->angular_velocity_covariance_);
  std::swap(linear_acceleration_, other->linear_acceleration_);
  linear_acceleration_covariance_.UnsafeArenaSwap(&other->linear_acceleration_covariance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Imu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Imu_descriptor_;
  metadata.reflection = Imu_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Imu

// required .gazebo.msgs.Quaternion orientation = 1;
bool Imu::has_orientation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Imu::set_has_orientation() {
  _has_bits_[0] |= 0x00000001u;
}
void Imu::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000001u;
}
void Imu::clear_orientation() {
  if (orientation_ != NULL) orientation_->::gazebo::msgs::Quaternion::Clear();
  clear_has_orientation();
}
const ::gazebo::msgs::Quaternion& Imu::orientation() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Imu.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::gazebo::msgs::Quaternion* Imu::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::gazebo::msgs::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:sensor_msgs.msgs.Imu.orientation)
  return orientation_;
}
::gazebo::msgs::Quaternion* Imu::release_orientation() {
  // @@protoc_insertion_point(field_release:sensor_msgs.msgs.Imu.orientation)
  clear_has_orientation();
  ::gazebo::msgs::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void Imu::set_allocated_orientation(::gazebo::msgs::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.msgs.Imu.orientation)
}

// repeated float orientation_covariance = 2 [packed = true];
int Imu::orientation_covariance_size() const {
  return orientation_covariance_.size();
}
void Imu::clear_orientation_covariance() {
  orientation_covariance_.Clear();
}
 float Imu::orientation_covariance(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Imu.orientation_covariance)
  return orientation_covariance_.Get(index);
}
 void Imu::set_orientation_covariance(int index, float value) {
  orientation_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Imu.orientation_covariance)
}
 void Imu::add_orientation_covariance(float value) {
  orientation_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:sensor_msgs.msgs.Imu.orientation_covariance)
}
 const ::google::protobuf::RepeatedField< float >&
Imu::orientation_covariance() const {
  // @@protoc_insertion_point(field_list:sensor_msgs.msgs.Imu.orientation_covariance)
  return orientation_covariance_;
}
 ::google::protobuf::RepeatedField< float >*
Imu::mutable_orientation_covariance() {
  // @@protoc_insertion_point(field_mutable_list:sensor_msgs.msgs.Imu.orientation_covariance)
  return &orientation_covariance_;
}

// required .gazebo.msgs.Vector3d angular_velocity = 3;
bool Imu::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Imu::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
void Imu::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
void Imu::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::gazebo::msgs::Vector3d::Clear();
  clear_has_angular_velocity();
}
const ::gazebo::msgs::Vector3d& Imu::angular_velocity() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Imu.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_ : *default_instance_->angular_velocity_;
}
::gazebo::msgs::Vector3d* Imu::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:sensor_msgs.msgs.Imu.angular_velocity)
  return angular_velocity_;
}
::gazebo::msgs::Vector3d* Imu::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:sensor_msgs.msgs.Imu.angular_velocity)
  clear_has_angular_velocity();
  ::gazebo::msgs::Vector3d* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void Imu::set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.msgs.Imu.angular_velocity)
}

// repeated float angular_velocity_covariance = 4 [packed = true];
int Imu::angular_velocity_covariance_size() const {
  return angular_velocity_covariance_.size();
}
void Imu::clear_angular_velocity_covariance() {
  angular_velocity_covariance_.Clear();
}
 float Imu::angular_velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Imu.angular_velocity_covariance)
  return angular_velocity_covariance_.Get(index);
}
 void Imu::set_angular_velocity_covariance(int index, float value) {
  angular_velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Imu.angular_velocity_covariance)
}
 void Imu::add_angular_velocity_covariance(float value) {
  angular_velocity_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:sensor_msgs.msgs.Imu.angular_velocity_covariance)
}
 const ::google::protobuf::RepeatedField< float >&
Imu::angular_velocity_covariance() const {
  // @@protoc_insertion_point(field_list:sensor_msgs.msgs.Imu.angular_velocity_covariance)
  return angular_velocity_covariance_;
}
 ::google::protobuf::RepeatedField< float >*
Imu::mutable_angular_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:sensor_msgs.msgs.Imu.angular_velocity_covariance)
  return &angular_velocity_covariance_;
}

// required .gazebo.msgs.Vector3d linear_acceleration = 5;
bool Imu::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Imu::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00000010u;
}
void Imu::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
void Imu::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->::gazebo::msgs::Vector3d::Clear();
  clear_has_linear_acceleration();
}
const ::gazebo::msgs::Vector3d& Imu::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Imu.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_ : *default_instance_->linear_acceleration_;
}
::gazebo::msgs::Vector3d* Imu::mutable_linear_acceleration() {
  set_has_linear_acceleration();
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:sensor_msgs.msgs.Imu.linear_acceleration)
  return linear_acceleration_;
}
::gazebo::msgs::Vector3d* Imu::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:sensor_msgs.msgs.Imu.linear_acceleration)
  clear_has_linear_acceleration();
  ::gazebo::msgs::Vector3d* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
void Imu::set_allocated_linear_acceleration(::gazebo::msgs::Vector3d* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    set_has_linear_acceleration();
  } else {
    clear_has_linear_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.msgs.Imu.linear_acceleration)
}

// repeated float linear_acceleration_covariance = 6 [packed = true];
int Imu::linear_acceleration_covariance_size() const {
  return linear_acceleration_covariance_.size();
}
void Imu::clear_linear_acceleration_covariance() {
  linear_acceleration_covariance_.Clear();
}
 float Imu::linear_acceleration_covariance(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Imu.linear_acceleration_covariance)
  return linear_acceleration_covariance_.Get(index);
}
 void Imu::set_linear_acceleration_covariance(int index, float value) {
  linear_acceleration_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Imu.linear_acceleration_covariance)
}
 void Imu::add_linear_acceleration_covariance(float value) {
  linear_acceleration_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:sensor_msgs.msgs.Imu.linear_acceleration_covariance)
}
 const ::google::protobuf::RepeatedField< float >&
Imu::linear_acceleration_covariance() const {
  // @@protoc_insertion_point(field_list:sensor_msgs.msgs.Imu.linear_acceleration_covariance)
  return linear_acceleration_covariance_;
}
 ::google::protobuf::RepeatedField< float >*
Imu::mutable_linear_acceleration_covariance() {
  // @@protoc_insertion_point(field_mutable_list:sensor_msgs.msgs.Imu.linear_acceleration_covariance)
  return &linear_acceleration_covariance_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)
