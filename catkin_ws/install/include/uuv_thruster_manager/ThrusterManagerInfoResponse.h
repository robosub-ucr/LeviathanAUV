// Generated by gencpp from file uuv_thruster_manager/ThrusterManagerInfoResponse.msg
// DO NOT EDIT!


#ifndef UUV_THRUSTER_MANAGER_MESSAGE_THRUSTERMANAGERINFORESPONSE_H
#define UUV_THRUSTER_MANAGER_MESSAGE_THRUSTERMANAGERINFORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uuv_thruster_manager
{
template <class ContainerAllocator>
struct ThrusterManagerInfoResponse_
{
  typedef ThrusterManagerInfoResponse_<ContainerAllocator> Type;

  ThrusterManagerInfoResponse_()
    : n_thrusters(0)
    , allocation_matrix()
    , reference_frame()  {
    }
  ThrusterManagerInfoResponse_(const ContainerAllocator& _alloc)
    : n_thrusters(0)
    , allocation_matrix(_alloc)
    , reference_frame(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _n_thrusters_type;
  _n_thrusters_type n_thrusters;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _allocation_matrix_type;
  _allocation_matrix_type allocation_matrix;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _reference_frame_type;
  _reference_frame_type reference_frame;





  typedef boost::shared_ptr< ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ThrusterManagerInfoResponse_

typedef ::uuv_thruster_manager::ThrusterManagerInfoResponse_<std::allocator<void> > ThrusterManagerInfoResponse;

typedef boost::shared_ptr< ::uuv_thruster_manager::ThrusterManagerInfoResponse > ThrusterManagerInfoResponsePtr;
typedef boost::shared_ptr< ::uuv_thruster_manager::ThrusterManagerInfoResponse const> ThrusterManagerInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator1> & lhs, const ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.n_thrusters == rhs.n_thrusters &&
    lhs.allocation_matrix == rhs.allocation_matrix &&
    lhs.reference_frame == rhs.reference_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator1> & lhs, const ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_thruster_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66fb8ab2f9c5649d97263c955edb636e";
  }

  static const char* value(const ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66fb8ab2f9c5649dULL;
  static const uint64_t static_value2 = 0x97263c955edb636eULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_thruster_manager/ThrusterManagerInfoResponse";
  }

  static const char* value(const ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 n_thrusters\n"
"float64[] allocation_matrix\n"
"string reference_frame\n"
"\n"
;
  }

  static const char* value(const ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.n_thrusters);
      stream.next(m.allocation_matrix);
      stream.next(m.reference_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ThrusterManagerInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_thruster_manager::ThrusterManagerInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "n_thrusters: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n_thrusters);
    s << indent << "allocation_matrix[]" << std::endl;
    for (size_t i = 0; i < v.allocation_matrix.size(); ++i)
    {
      s << indent << "  allocation_matrix[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.allocation_matrix[i]);
    }
    s << indent << "reference_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.reference_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_THRUSTER_MANAGER_MESSAGE_THRUSTERMANAGERINFORESPONSE_H
