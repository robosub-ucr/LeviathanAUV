// Generated by gencpp from file uuv_thruster_manager/GetThrusterManagerConfigResponse.msg
// DO NOT EDIT!


#ifndef UUV_THRUSTER_MANAGER_MESSAGE_GETTHRUSTERMANAGERCONFIGRESPONSE_H
#define UUV_THRUSTER_MANAGER_MESSAGE_GETTHRUSTERMANAGERCONFIGRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uuv_thruster_manager
{
template <class ContainerAllocator>
struct GetThrusterManagerConfigResponse_
{
  typedef GetThrusterManagerConfigResponse_<ContainerAllocator> Type;

  GetThrusterManagerConfigResponse_()
    : tf_prefix()
    , base_link()
    , thruster_frame_base()
    , thruster_topic_prefix()
    , thruster_topic_suffix()
    , timeout(0.0)
    , max_thrust(0.0)
    , n_thrusters(0)
    , allocation_matrix()  {
    }
  GetThrusterManagerConfigResponse_(const ContainerAllocator& _alloc)
    : tf_prefix(_alloc)
    , base_link(_alloc)
    , thruster_frame_base(_alloc)
    , thruster_topic_prefix(_alloc)
    , thruster_topic_suffix(_alloc)
    , timeout(0.0)
    , max_thrust(0.0)
    , n_thrusters(0)
    , allocation_matrix(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _tf_prefix_type;
  _tf_prefix_type tf_prefix;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _base_link_type;
  _base_link_type base_link;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _thruster_frame_base_type;
  _thruster_frame_base_type thruster_frame_base;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _thruster_topic_prefix_type;
  _thruster_topic_prefix_type thruster_topic_prefix;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _thruster_topic_suffix_type;
  _thruster_topic_suffix_type thruster_topic_suffix;

   typedef double _timeout_type;
  _timeout_type timeout;

   typedef double _max_thrust_type;
  _max_thrust_type max_thrust;

   typedef int32_t _n_thrusters_type;
  _n_thrusters_type n_thrusters;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _allocation_matrix_type;
  _allocation_matrix_type allocation_matrix;





  typedef boost::shared_ptr< ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetThrusterManagerConfigResponse_

typedef ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<std::allocator<void> > GetThrusterManagerConfigResponse;

typedef boost::shared_ptr< ::uuv_thruster_manager::GetThrusterManagerConfigResponse > GetThrusterManagerConfigResponsePtr;
typedef boost::shared_ptr< ::uuv_thruster_manager::GetThrusterManagerConfigResponse const> GetThrusterManagerConfigResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator1> & lhs, const ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator2> & rhs)
{
  return lhs.tf_prefix == rhs.tf_prefix &&
    lhs.base_link == rhs.base_link &&
    lhs.thruster_frame_base == rhs.thruster_frame_base &&
    lhs.thruster_topic_prefix == rhs.thruster_topic_prefix &&
    lhs.thruster_topic_suffix == rhs.thruster_topic_suffix &&
    lhs.timeout == rhs.timeout &&
    lhs.max_thrust == rhs.max_thrust &&
    lhs.n_thrusters == rhs.n_thrusters &&
    lhs.allocation_matrix == rhs.allocation_matrix;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator1> & lhs, const ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_thruster_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5a2d9d3bb510dd91fdb03f95e95b8de";
  }

  static const char* value(const ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5a2d9d3bb510dd9ULL;
  static const uint64_t static_value2 = 0x1fdb03f95e95b8deULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_thruster_manager/GetThrusterManagerConfigResponse";
  }

  static const char* value(const ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string tf_prefix\n"
"string base_link\n"
"string thruster_frame_base\n"
"string thruster_topic_prefix\n"
"string thruster_topic_suffix\n"
"float64 timeout\n"
"float64 max_thrust\n"
"int32 n_thrusters\n"
"float64[] allocation_matrix\n"
"\n"
;
  }

  static const char* value(const ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tf_prefix);
      stream.next(m.base_link);
      stream.next(m.thruster_frame_base);
      stream.next(m.thruster_topic_prefix);
      stream.next(m.thruster_topic_suffix);
      stream.next(m.timeout);
      stream.next(m.max_thrust);
      stream.next(m.n_thrusters);
      stream.next(m.allocation_matrix);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetThrusterManagerConfigResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_thruster_manager::GetThrusterManagerConfigResponse_<ContainerAllocator>& v)
  {
    s << indent << "tf_prefix: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.tf_prefix);
    s << indent << "base_link: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.base_link);
    s << indent << "thruster_frame_base: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.thruster_frame_base);
    s << indent << "thruster_topic_prefix: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.thruster_topic_prefix);
    s << indent << "thruster_topic_suffix: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.thruster_topic_suffix);
    s << indent << "timeout: ";
    Printer<double>::stream(s, indent + "  ", v.timeout);
    s << indent << "max_thrust: ";
    Printer<double>::stream(s, indent + "  ", v.max_thrust);
    s << indent << "n_thrusters: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n_thrusters);
    s << indent << "allocation_matrix[]" << std::endl;
    for (size_t i = 0; i < v.allocation_matrix.size(); ++i)
    {
      s << indent << "  allocation_matrix[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.allocation_matrix[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_THRUSTER_MANAGER_MESSAGE_GETTHRUSTERMANAGERCONFIGRESPONSE_H
