// Generated by gencpp from file uuv_sensor_ros_plugins_msgs/ChangeSensorStateRequest.msg
// DO NOT EDIT!


#ifndef UUV_SENSOR_ROS_PLUGINS_MSGS_MESSAGE_CHANGESENSORSTATEREQUEST_H
#define UUV_SENSOR_ROS_PLUGINS_MSGS_MESSAGE_CHANGESENSORSTATEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uuv_sensor_ros_plugins_msgs
{
template <class ContainerAllocator>
struct ChangeSensorStateRequest_
{
  typedef ChangeSensorStateRequest_<ContainerAllocator> Type;

  ChangeSensorStateRequest_()
    : on(false)  {
    }
  ChangeSensorStateRequest_(const ContainerAllocator& _alloc)
    : on(false)  {
  (void)_alloc;
    }



   typedef uint8_t _on_type;
  _on_type on;





  typedef boost::shared_ptr< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ChangeSensorStateRequest_

typedef ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<std::allocator<void> > ChangeSensorStateRequest;

typedef boost::shared_ptr< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest > ChangeSensorStateRequestPtr;
typedef boost::shared_ptr< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest const> ChangeSensorStateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator1> & lhs, const ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.on == rhs.on;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator1> & lhs, const ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_sensor_ros_plugins_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74983d2ffe4877de8ae30b7a94625c41";
  }

  static const char* value(const ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74983d2ffe4877deULL;
  static const uint64_t static_value2 = 0x8ae30b7a94625c41ULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_sensor_ros_plugins_msgs/ChangeSensorStateRequest";
  }

  static const char* value(const ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool on\n"
;
  }

  static const char* value(const ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.on);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChangeSensorStateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_sensor_ros_plugins_msgs::ChangeSensorStateRequest_<ContainerAllocator>& v)
  {
    s << indent << "on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.on);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_SENSOR_ROS_PLUGINS_MSGS_MESSAGE_CHANGESENSORSTATEREQUEST_H
