// Generated by gencpp from file uuv_sensor_ros_plugins_msgs/DVL.msg
// DO NOT EDIT!


#ifndef UUV_SENSOR_ROS_PLUGINS_MSGS_MESSAGE_DVL_H
#define UUV_SENSOR_ROS_PLUGINS_MSGS_MESSAGE_DVL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <uuv_sensor_ros_plugins_msgs/DVLBeam.h>

namespace uuv_sensor_ros_plugins_msgs
{
template <class ContainerAllocator>
struct DVL_
{
  typedef DVL_<ContainerAllocator> Type;

  DVL_()
    : header()
    , velocity()
    , velocity_covariance()
    , altitude(0.0)
    , beams()  {
      velocity_covariance.assign(0.0);
  }
  DVL_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , velocity(_alloc)
    , velocity_covariance()
    , altitude(0.0)
    , beams(_alloc)  {
  (void)_alloc;
      velocity_covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef boost::array<double, 9>  _velocity_covariance_type;
  _velocity_covariance_type velocity_covariance;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef std::vector< ::uuv_sensor_ros_plugins_msgs::DVLBeam_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::uuv_sensor_ros_plugins_msgs::DVLBeam_<ContainerAllocator> >> _beams_type;
  _beams_type beams;





  typedef boost::shared_ptr< ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> const> ConstPtr;

}; // struct DVL_

typedef ::uuv_sensor_ros_plugins_msgs::DVL_<std::allocator<void> > DVL;

typedef boost::shared_ptr< ::uuv_sensor_ros_plugins_msgs::DVL > DVLPtr;
typedef boost::shared_ptr< ::uuv_sensor_ros_plugins_msgs::DVL const> DVLConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator1> & lhs, const ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.velocity == rhs.velocity &&
    lhs.velocity_covariance == rhs.velocity_covariance &&
    lhs.altitude == rhs.altitude &&
    lhs.beams == rhs.beams;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator1> & lhs, const ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_sensor_ros_plugins_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02bba6182b6f271447d7f88473256572";
  }

  static const char* value(const ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02bba6182b6f2714ULL;
  static const uint64_t static_value2 = 0x47d7f88473256572ULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_sensor_ros_plugins_msgs/DVL";
  }

  static const char* value(const ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2016 The UUV Simulator Authors.\n"
"# All rights reserved.\n"
"#\n"
"# Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"# you may not use this file except in compliance with the License.\n"
"# You may obtain a copy of the License at\n"
"#\n"
"#     http://www.apache.org/licenses/LICENSE-2.0\n"
"#\n"
"# Unless required by applicable law or agreed to in writing, software\n"
"# distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"# See the License for the specific language governing permissions and\n"
"# limitations under the License.\n"
"\n"
"# This is a message to hold data from a DVL sensor (Doppler Velocity Log).\n"
"#\n"
"# Distances are in [m], velocities in [m/s]\n"
"#\n"
"# If the covariance is known, it should be filled.\n"
"# If it is unknown, it should be set to all zeros.\n"
"# If a measurement was invalid, its covariance should be set to -1 so it can be\n"
"# disregarded.\n"
"#\n"
"# DVLBeams are optional. If they are set they contain individual ranges and 1D\n"
"# doppler velocity estimates orthogonal to the ray.\n"
"\n"
"Header header\n"
"# Measured velocity [m/s]\n"
"geometry_msgs/Vector3 velocity\n"
"# Row major, xyz axes\n"
"float64[9] velocity_covariance\n"
"# Altitude of the vehicle\n"
"float64 altitude\n"
"DVLBeam[] beams\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: uuv_sensor_ros_plugins_msgs/DVLBeam\n"
"# Copyright (c) 2016 The UUV Simulator Authors.\n"
"# All rights reserved.\n"
"#\n"
"# Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"# you may not use this file except in compliance with the License.\n"
"# You may obtain a copy of the License at\n"
"#\n"
"#     http://www.apache.org/licenses/LICENSE-2.0\n"
"#\n"
"# Unless required by applicable law or agreed to in writing, software\n"
"# distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"# See the License for the specific language governing permissions and\n"
"# limitations under the License.\n"
"\n"
"# measured range [m] or < 0 if invalid\n"
"float64 range\n"
"float64 range_covariance\n"
"\n"
"float64 velocity # measured velocity [m/s] of corr. beam\n"
"float64 velocity_covariance\n"
"\n"
"# Beam link pose wrt DVL link frame\n"
"geometry_msgs/PoseStamped pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.velocity);
      stream.next(m.velocity_covariance);
      stream.next(m.altitude);
      stream.next(m.beams);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DVL_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_sensor_ros_plugins_msgs::DVL_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "velocity_covariance[]" << std::endl;
    for (size_t i = 0; i < v.velocity_covariance.size(); ++i)
    {
      s << indent << "  velocity_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity_covariance[i]);
    }
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "beams[]" << std::endl;
    for (size_t i = 0; i < v.beams.size(); ++i)
    {
      s << indent << "  beams[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::uuv_sensor_ros_plugins_msgs::DVLBeam_<ContainerAllocator> >::stream(s, indent + "    ", v.beams[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_SENSOR_ROS_PLUGINS_MSGS_MESSAGE_DVL_H
