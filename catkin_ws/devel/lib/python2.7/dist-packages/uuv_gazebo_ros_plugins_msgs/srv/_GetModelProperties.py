# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uuv_gazebo_ros_plugins_msgs/GetModelPropertiesRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetModelPropertiesRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "uuv_gazebo_ros_plugins_msgs/GetModelPropertiesRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Copyright (c) 2016 The UUV Simulator Authors.
# All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetModelPropertiesRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uuv_gazebo_ros_plugins_msgs/GetModelPropertiesResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import uuv_gazebo_ros_plugins_msgs.msg

class GetModelPropertiesResponse(genpy.Message):
  _md5sum = "222d64ab6fa46c24f1abd065170ebe7a"
  _type = "uuv_gazebo_ros_plugins_msgs/GetModelPropertiesResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string[]  link_names
uuv_gazebo_ros_plugins_msgs/UnderwaterObjectModel[] models


================================================================================
MSG: uuv_gazebo_ros_plugins_msgs/UnderwaterObjectModel
# Copyright (c) 2016 The UUV Simulator Authors.
# All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

float64[] added_mass
float64[] linear_damping
float64[] linear_damping_forward_speed
float64[] quadratic_damping
float64 volume
float64 bbox_height
float64 bbox_length
float64 bbox_width
float64 fluid_density
geometry_msgs/Vector3 cob
bool neutrally_buoyant
geometry_msgs/Inertia inertia
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Inertia
# Mass [kg]
float64 m

# Center of mass [m]
geometry_msgs/Vector3 com

# Inertia Tensor [kg-m^2]
#     | ixx ixy ixz |
# I = | ixy iyy iyz |
#     | ixz iyz izz |
float64 ixx
float64 ixy
float64 ixz
float64 iyy
float64 iyz
float64 izz
"""
  __slots__ = ['link_names','models']
  _slot_types = ['string[]','uuv_gazebo_ros_plugins_msgs/UnderwaterObjectModel[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       link_names,models

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetModelPropertiesResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.link_names is None:
        self.link_names = []
      if self.models is None:
        self.models = []
    else:
      self.link_names = []
      self.models = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.link_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.link_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.models)
      buff.write(_struct_I.pack(length))
      for val1 in self.models:
        length = len(val1.added_mass)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.added_mass))
        length = len(val1.linear_damping)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.linear_damping))
        length = len(val1.linear_damping_forward_speed)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.linear_damping_forward_speed))
        length = len(val1.quadratic_damping)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.quadratic_damping))
        _x = val1
        buff.write(_get_struct_5d().pack(_x.volume, _x.bbox_height, _x.bbox_length, _x.bbox_width, _x.fluid_density))
        _v1 = val1.cob
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.neutrally_buoyant
        buff.write(_get_struct_B().pack(_x))
        _v2 = val1.inertia
        _x = _v2.m
        buff.write(_get_struct_d().pack(_x))
        _v3 = _v2.com
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v2
        buff.write(_get_struct_6d().pack(_x.ixx, _x.ixy, _x.ixz, _x.iyy, _x.iyz, _x.izz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.models is None:
        self.models = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.link_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.link_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.models = []
      for i in range(0, length):
        val1 = uuv_gazebo_ros_plugins_msgs.msg.UnderwaterObjectModel()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.added_mass = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.linear_damping = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.linear_damping_forward_speed = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.quadratic_damping = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 40
        (_x.volume, _x.bbox_height, _x.bbox_length, _x.bbox_width, _x.fluid_density,) = _get_struct_5d().unpack(str[start:end])
        _v4 = val1.cob
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.neutrally_buoyant,) = _get_struct_B().unpack(str[start:end])
        val1.neutrally_buoyant = bool(val1.neutrally_buoyant)
        _v5 = val1.inertia
        start = end
        end += 8
        (_v5.m,) = _get_struct_d().unpack(str[start:end])
        _v6 = _v5.com
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v5
        start = end
        end += 48
        (_x.ixx, _x.ixy, _x.ixz, _x.iyy, _x.iyz, _x.izz,) = _get_struct_6d().unpack(str[start:end])
        self.models.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.link_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.link_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.models)
      buff.write(_struct_I.pack(length))
      for val1 in self.models:
        length = len(val1.added_mass)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.added_mass.tostring())
        length = len(val1.linear_damping)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.linear_damping.tostring())
        length = len(val1.linear_damping_forward_speed)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.linear_damping_forward_speed.tostring())
        length = len(val1.quadratic_damping)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.quadratic_damping.tostring())
        _x = val1
        buff.write(_get_struct_5d().pack(_x.volume, _x.bbox_height, _x.bbox_length, _x.bbox_width, _x.fluid_density))
        _v7 = val1.cob
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.neutrally_buoyant
        buff.write(_get_struct_B().pack(_x))
        _v8 = val1.inertia
        _x = _v8.m
        buff.write(_get_struct_d().pack(_x))
        _v9 = _v8.com
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v8
        buff.write(_get_struct_6d().pack(_x.ixx, _x.ixy, _x.ixz, _x.iyy, _x.iyz, _x.izz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.models is None:
        self.models = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.link_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.link_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.models = []
      for i in range(0, length):
        val1 = uuv_gazebo_ros_plugins_msgs.msg.UnderwaterObjectModel()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.added_mass = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.linear_damping = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.linear_damping_forward_speed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.quadratic_damping = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _x = val1
        start = end
        end += 40
        (_x.volume, _x.bbox_height, _x.bbox_length, _x.bbox_width, _x.fluid_density,) = _get_struct_5d().unpack(str[start:end])
        _v10 = val1.cob
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.neutrally_buoyant,) = _get_struct_B().unpack(str[start:end])
        val1.neutrally_buoyant = bool(val1.neutrally_buoyant)
        _v11 = val1.inertia
        start = end
        end += 8
        (_v11.m,) = _get_struct_d().unpack(str[start:end])
        _v12 = _v11.com
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v11
        start = end
        end += 48
        (_x.ixx, _x.ixy, _x.ixz, _x.iyy, _x.iyz, _x.izz,) = _get_struct_6d().unpack(str[start:end])
        self.models.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
class GetModelProperties(object):
  _type          = 'uuv_gazebo_ros_plugins_msgs/GetModelProperties'
  _md5sum = '222d64ab6fa46c24f1abd065170ebe7a'
  _request_class  = GetModelPropertiesRequest
  _response_class = GetModelPropertiesResponse
