// Generated by gencpp from file uuv_auv_control_allocator/AUVCommand.msg
// DO NOT EDIT!


#ifndef UUV_AUV_CONTROL_ALLOCATOR_MESSAGE_AUVCOMMAND_H
#define UUV_AUV_CONTROL_ALLOCATOR_MESSAGE_AUVCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Wrench.h>

namespace uuv_auv_control_allocator
{
template <class ContainerAllocator>
struct AUVCommand_
{
  typedef AUVCommand_<ContainerAllocator> Type;

  AUVCommand_()
    : header()
    , surge_speed(0.0)
    , command()  {
    }
  AUVCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , surge_speed(0.0)
    , command(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _surge_speed_type;
  _surge_speed_type surge_speed;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _command_type;
  _command_type command;





  typedef boost::shared_ptr< ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> const> ConstPtr;

}; // struct AUVCommand_

typedef ::uuv_auv_control_allocator::AUVCommand_<std::allocator<void> > AUVCommand;

typedef boost::shared_ptr< ::uuv_auv_control_allocator::AUVCommand > AUVCommandPtr;
typedef boost::shared_ptr< ::uuv_auv_control_allocator::AUVCommand const> AUVCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator1> & lhs, const ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.surge_speed == rhs.surge_speed &&
    lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator1> & lhs, const ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_auv_control_allocator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d7c962f08b7f118399273df23351e7c";
  }

  static const char* value(const ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d7c962f08b7f118ULL;
  static const uint64_t static_value2 = 0x399273df23351e7cULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_auv_control_allocator/AUVCommand";
  }

  static const char* value(const ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2016 The UUV Simulator Authors.\n"
"# All rights reserved.\n"
"#\n"
"# Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"# you may not use this file except in compliance with the License.\n"
"# You may obtain a copy of the License at\n"
"#\n"
"#     http://www.apache.org/licenses/LICENSE-2.0\n"
"#\n"
"# Unless required by applicable law or agreed to in writing, software\n"
"# distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"# See the License for the specific language governing permissions and\n"
"# limitations under the License.\n"
"\n"
"std_msgs/Header header\n"
"float64 surge_speed\n"
"geometry_msgs/Wrench command\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.surge_speed);
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AUVCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_auv_control_allocator::AUVCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "surge_speed: ";
    Printer<double>::stream(s, indent + "  ", v.surge_speed);
    s << indent << "command: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_AUV_CONTROL_ALLOCATOR_MESSAGE_AUVCOMMAND_H
