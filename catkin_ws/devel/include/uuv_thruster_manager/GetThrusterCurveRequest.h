// Generated by gencpp from file uuv_thruster_manager/GetThrusterCurveRequest.msg
// DO NOT EDIT!


#ifndef UUV_THRUSTER_MANAGER_MESSAGE_GETTHRUSTERCURVEREQUEST_H
#define UUV_THRUSTER_MANAGER_MESSAGE_GETTHRUSTERCURVEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uuv_thruster_manager
{
template <class ContainerAllocator>
struct GetThrusterCurveRequest_
{
  typedef GetThrusterCurveRequest_<ContainerAllocator> Type;

  GetThrusterCurveRequest_()
    : min(0.0)
    , max(0.0)
    , n_points(0)  {
    }
  GetThrusterCurveRequest_(const ContainerAllocator& _alloc)
    : min(0.0)
    , max(0.0)
    , n_points(0)  {
  (void)_alloc;
    }



   typedef double _min_type;
  _min_type min;

   typedef double _max_type;
  _max_type max;

   typedef int32_t _n_points_type;
  _n_points_type n_points;





  typedef boost::shared_ptr< ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetThrusterCurveRequest_

typedef ::uuv_thruster_manager::GetThrusterCurveRequest_<std::allocator<void> > GetThrusterCurveRequest;

typedef boost::shared_ptr< ::uuv_thruster_manager::GetThrusterCurveRequest > GetThrusterCurveRequestPtr;
typedef boost::shared_ptr< ::uuv_thruster_manager::GetThrusterCurveRequest const> GetThrusterCurveRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator1> & lhs, const ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator2> & rhs)
{
  return lhs.min == rhs.min &&
    lhs.max == rhs.max &&
    lhs.n_points == rhs.n_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator1> & lhs, const ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_thruster_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b8a1df953063c9de5f9a6419991fa0c";
  }

  static const char* value(const ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b8a1df953063c9dULL;
  static const uint64_t static_value2 = 0xe5f9a6419991fa0cULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_thruster_manager/GetThrusterCurveRequest";
  }

  static const char* value(const ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2016 The UUV Simulator Authors.\n"
"# All rights reserved.\n"
"#\n"
"# Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"# you may not use this file except in compliance with the License.\n"
"# You may obtain a copy of the License at\n"
"#\n"
"#     http://www.apache.org/licenses/LICENSE-2.0\n"
"#\n"
"# Unless required by applicable law or agreed to in writing, software\n"
"# distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"# See the License for the specific language governing permissions and\n"
"# limitations under the License.\n"
"\n"
"float64 min\n"
"float64 max\n"
"int32 n_points\n"
;
  }

  static const char* value(const ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.min);
      stream.next(m.max);
      stream.next(m.n_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetThrusterCurveRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_thruster_manager::GetThrusterCurveRequest_<ContainerAllocator>& v)
  {
    s << indent << "min: ";
    Printer<double>::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    Printer<double>::stream(s, indent + "  ", v.max);
    s << indent << "n_points: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n_points);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_THRUSTER_MANAGER_MESSAGE_GETTHRUSTERCURVEREQUEST_H
